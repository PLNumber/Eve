@startuml
' üíÑ ÏãúÍ∞Å Ï†ïÎèàÏö© ÏÑ§Ï†ï
skinparam classAttributeIconSize 0
skinparam ClassFontSize 11
skinparam ClassAttributeFontSize 10
skinparam ClassStereotypeFontSize 9
skinparam BackgroundColor #FAFAFA
skinparam ArrowColor DarkSlateGray
skinparam ClassBackgroundColor White
skinparam Shadowing false
skinparam dpi 150

' üí° Ìå®ÌÇ§ÏßÄ Îã®ÏúÑÎ°ú Í∑∏Î£πÌïë
set namespaceSeparator ::

class "eve::controller::quiz_controller.dart::QuizController" {
  -QuizService _service
  +dynamic generateQuiz()
  +dynamic checkAnswer()
  +dynamic nextQuestion()
  +void endQuiz()
}

"eve::controller::quiz_controller.dart::QuizController" o-- "eve::services::quiz_service.dart::QuizService"

class "eve::controller::quiz_controller.dart::AnswerResult" {
  +bool isCorrect
  +String? feedback
}

class "eve::firebase_options.dart::DefaultFirebaseOptions" {
  {static} +FirebaseOptions android
  {static} +FirebaseOptions currentPlatform
}

"eve::firebase_options.dart::DefaultFirebaseOptions" o-- "firebase_core_platform_interface::firebase_core_platform_interface.dart::FirebaseOptions"


class "eve::main.dart::MyApp" {
  -dynamic _getStartPage()
  +Widget build()
}

"flutter::src::widgets::framework.dart::StatelessWidget" <|-- "eve::main.dart::MyApp"

class "eve::main.dart::MainPage" {
  +_MainPage createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "eve::main.dart::MainPage"

class "eve::main.dart::_MainPage" {
  +String nickname
  +String accuracy
  +String learningTime
  +int totalSolved
  +int correctSolved
  -int _level
  -int _exp
  -int _maxExp
  -bool _notificationsEnabled
  +void initState()
  +String getGradeMappingText()
  -dynamic _loadUserInfo()
  -dynamic _loadStats()
  -dynamic _loadLearningTime()
  +String getProfileImage()
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "eve::main.dart::_MainPage"

class "eve::model::quiz.dart::QuizQuestion" {
  +String question
  +String answer
  +String hint
  +List<String> distractors
  +List<String> feedbacks
  +int difficulty
  +bool isReview
  +Map<String, dynamic> toMap()
  +Map<String, dynamic> toJson()
}

class "eve::repository::quiz_repository.dart::QuizRepository" {
  -FirebaseFirestore _firestore
  +GeminiService geminiService
  +dynamic selectWord()
  +List<String> getGradeRangeFromLevel()
  +dynamic isExist()
  +dynamic generateQuestion()
  -bool _isValidQuiz()
  +dynamic saveQuiz()
  +dynamic getSavedQuestion()
  +dynamic generateFeedBack()
  +dynamic appendFeedback()
  +dynamic updateStatsOnCorrect()
  +dynamic updateStatsOnIncorrect()
  +dynamic getRandomIncorrectWord()
  +dynamic incrementTotalSolved()
  +dynamic incrementCorrectSolved()
  +dynamic resetUserStats()
}

"eve::repository::quiz_repository.dart::QuizRepository" o-- "cloud_firestore::cloud_firestore.dart::FirebaseFirestore"
"eve::repository::quiz_repository.dart::QuizRepository" o-- "eve::services::gemini_service.dart::GeminiService"

class "eve::services::gemini_service.dart::GeminiService" {
  +String apiKey
  +int extractLevelNumber()
  +dynamic generateQuizQuestion()
  +dynamic reviewAndFixQuiz()
  -String _buildReviewPrompt()
}

class "eve::services::quiz_service.dart::QuizService" {
  -QuizRepository _repository
  -int _quizCount
  +int reviewInterval
  +String adjustBlankLength()
  +String fixSplitUnderscore()
  +String formatQuestion()
  +String extractStem()
  +dynamic getQuestion()
  +dynamic compareAnswer()
  +bool isClearlyInvalidWord()
}

"eve::services::quiz_service.dart::QuizService" o-- "eve::repository::quiz_repository.dart::QuizRepository"


class "eve::views::pages::quiz_option_page.dart::QuizOptionPage" {
  +State<QuizOptionPage> createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "eve::views::pages::quiz_option_page.dart::QuizOptionPage"

class "eve::views::pages::quiz_option_page.dart::_QuizOptionPageState" {
  +void initState()
  +Widget build()
  -Widget _buildOptionCard()
}

"flutter::src::widgets::framework.dart::State" <|-- "eve::views::pages::quiz_option_page.dart::_QuizOptionPageState"

class "eve::views::pages::quiz_page.dart::QuizPage" {
  +State<QuizPage> createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "eve::views::pages::quiz_page.dart::QuizPage"

class "eve::views::pages::quiz_page.dart::_QuizPageState" {
  -FocusNode _answerFocusNode
  +QuizController controller
  +QuizQuestion? currentQuestion
  +bool isLoading
  +String errorMessage
  +String answerHintText
  +bool hasSubmitted
  -int _level
  -int _exp
  -int _maxExp
  -DateTime _quizStartTime
  -TextEditingController _answerCtrl
  +void initState()
  +void dispose()
  -dynamic _loadUserLevel()
  +Color getDifficultyColor()
  -dynamic _endQuiz()
  -dynamic _loadQuiz()
  -dynamic _submitAnswer()
  -dynamic _increaseDailyVocabCount()
  -void _showFeedbackDialog()
  -String _extractInitialHint()
  +Widget build()
}

"eve::views::pages::quiz_page.dart::_QuizPageState" o-- "flutter::src::widgets::focus_manager.dart::FocusNode"
"eve::views::pages::quiz_page.dart::_QuizPageState" o-- "eve::controller::quiz_controller.dart::QuizController"
"eve::views::pages::quiz_page.dart::_QuizPageState" o-- "eve::model::quiz.dart::QuizQuestion"
"eve::views::pages::quiz_page.dart::_QuizPageState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "eve::views::pages::quiz_page.dart::_QuizPageState"


@enduml